#!/bin/bash -e

IMAGE=${IMAGE:-zultron/mk-cross-builder}
BASE_NAME=mk-cross-builder

TOPDIR="$(dirname $0)"
CONTAINER_REV=$(git -C "${TOPDIR}" rev-parse --short HEAD)

# Read config variables
. "$TOPDIR/config.sh"

TAGS="$(compgen -v SETTINGS_ | sed 's/^SETTINGS_//')"

usage() {
    ERRMSG="$1"
    {
	test -z "$ERRMSG" || echo "ERROR:  $ERRMSG"
	echo "Usage:"
	echo "    $0 update                Update all Dockerfiles from template"
	echo "    $0 build TAG             Build Docker container image"
	echo "    $0 TAG                   Run interactive shell in container"
	echo "    $0 TAG CMD [ ARGS ... ]  Run CMD in container"
	echo "TAGs:  $(echo $TAGS)"
    } >&2
    if test -z "$ERRMSG"; then
	exit
    else
	exit 1
    fi
}

template_dockerfile() {
    # Customize Dockerfile for a tag
    TAG=$1
    declare -a substitutions=()
    eval KEYS="\${!SETTINGS_${TAG}[@]}"
    # Build array of `sed -e 's/@$KEY@/$VAL/'` replacements
    for KEY in $KEYS; do
	eval VAL="\${SETTINGS_$TAG[$KEY]}"
	substitutions+=( "-e" "s,@$KEY@,$VAL," )
    done
    echo "Updating Dockerfile.$TAG" >&2
    {
	echo "# Autogenerated from https://github.com/zultron/mk-cross-builder"
	echo "# DO NOT EDIT:  any changes will be lost"
	sed "$TOPDIR/Dockerfile" \
	    "${substitutions[@]}" \
	    -e "s/@CONTAINER_REV@/$CONTAINER_REV/"
    } > "$TOPDIR/Dockerfile.$TAG"

}

if test "$1" = "build"; then
    # Build:  If called with args `mk-cross-builder build [...]`, then
    # build the image instead of running it, and add arguments to the
    # `docker build` command
    shift
    TAG="$1"
    test -n "$TAG" || usage "Please specify tag to build"
    shift
    cd $(dirname $0)
    template_dockerfile $TAG
    set -x
    exec docker build \
	-t ${IMAGE}:${TAG} \
	-f "${TOPDIR}/Dockerfile.${TAG}" \
	"$@" .
elif test "$1" = "update"; then
    # Update:  If called with args `mk-cross-builder update`, then
    # update `dockerfiles/Dockerfile.*` from template
    for TAG in $TAGS; do
	template_dockerfile $TAG
    done
    exit
fi

TAG="$1"
test -n "$TAG" || usage "Please specify tag to run"
shift

NAME=${BASE_NAME}-${TAG}

# Check for existing containers
EXISTING="$(docker ps -aq --filter=name=${NAME})"
if test -n "${EXISTING}"; then
    # Container exists; is it running?
    RUNNING=$(docker inspect ${EXISTING} | awk '/"Running":/ { print $2 }')
    if test "${RUNNING}" = "false,"; then
	# Remove stopped container
	echo docker rm ${EXISTING}
    elif test "${RUNNING}" = "true,"; then
	# Container already running; error
	echo "Error:  container '${NAME}' already running" >&2
	exit 1
    else
	# Something went wrong
	echo "Error:  unable to determine status of " \
	    "existing container '${EXISTING}'" >&2
	exit 1
    fi
fi

set -x
docker run --rm \
    -it --privileged \
    -u `id -u`:`id -g` \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /dev/dri:/dev/dri \
    -v $HOME:$HOME -e HOME \
    -v $PWD:$PWD \
    -w $PWD \
    -e DISPLAY \
    -h ${NAME} --name ${NAME} \
    ${IMAGE}:${TAG} "$@"
